import pygame, random

# Tamaño de la ventana
WIDTH = 800
HEIGHT = 600

# Colores usados
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
ORANGE = (255, 102, 0)
BLUE = (0, 0, 255)
PURPLE = (102, 0, 102)
BLUE_C = (0, 255, 255)

# Iniciación Pygame
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("La Epa Ataca")
clock = pygame.time.Clock()


def draw_text(surface, text, size, x, y):
	# Funcion para actualizar texto en la ventana
	font = pygame.font.SysFont("serif", size)
	text_surface = font.render(text, True, PURPLE)
	text_rect = text_surface.get_rect()
	text_rect.midtop = (x, y)
	surface.blit(text_surface, text_rect)


def draw_shield_bar(surface, x, y, percentage):
	# Funcion para actualizar la barra de vida
	BAR_LENGHT = 100
	BAR_HEIGHT = 10
	fill = (percentage / 100) * BAR_LENGHT
	border = pygame.Rect(x, y, BAR_LENGHT, BAR_HEIGHT)
	fill = pygame.Rect(x, y, fill, BAR_HEIGHT)
	pygame.draw.rect(surface, GREEN, fill)
	pygame.draw.rect(surface, WHITE, border, 2)


class Player(pygame.sprite.Sprite):
	# Clase para representar el jugador (Epa)

	def _init_(self):
		# Constructor para el jugador
		super()._init_()
		self.image = pygame.transform.scale(pygame.image.load("PROYECTO/epa.png").convert(), (50, 50))
		self.image.set_colorkey(BLACK)
		self.rect = self.image.get_rect()
		self.rect.centerx = WIDTH // 2
		self.rect.bottom = HEIGHT - 10
		self.speed_x = 0
		self.shield = 100

	def update(self):
		# Se actualiza el estado del jugador
		self.speed_x = 0
		keystate = pygame.key.get_pressed()
		if keystate[pygame.K_LEFT]:
			self.speed_x = -5
		if keystate[pygame.K_RIGHT]:
			self.speed_x = 5
		self.rect.x += self.speed_x
		if self.rect.right > WIDTH:
			self.rect.right = WIDTH
		if self.rect.left < 0:
			self.rect.left = 0

	def shoot(self):
		# Funcion para que el jugador dispare
		bullet = Bullet(self.rect.centerx, self.rect.top)
		all_sprites.add(bullet)
		bullets.add(bullet)


class Meteor(pygame.sprite.Sprite):
	# Clase para representar los meteoritos (Politicos)

	def _init_(self):
		# Constructor para los meteoritos
		super()._init_()
		self.image = random.choice(meteor_images)
		self.image.set_colorkey(BLACK)
		self.rect = self.image.get_rect()
		self.rect.x = random.randrange(WIDTH - self.rect.width)
		self.rect.y = random.randrange(-140, -100)
		self.speedy = random.randrange(1, 10)
		self.speedx = random.randrange(-5, 5)


	def update(self):
		# Funcion para actualizar el estado de los meteoritos
		self.rect.y += self.speedy
		self.rect.x += self.speedx
		if self.rect.top > HEIGHT + 10 or self.rect.left < -40 or self.rect.right > WIDTH + 40:
			self.rect.x = random.randrange(WIDTH - self.rect.width)
			self.rect.y = random.randrange(-140, - 100)
			self.speedy = random.randrange(1, 10)


class Bullet(pygame.sprite.Sprite):
	# Clase para representar el disparo

	def _init_(self, x, y):
		# Constructor para el disparo
		super()._init_()
		self.image = pygame.transform.scale(pygame.image.load("PROYECTO/keratina.png").convert(), (35, 35))
		self.image.set_colorkey(BLACK)
		self.rect = self.image.get_rect()
		self.rect.y = y
		self.rect.centerx = x
		self.speedy = -10


	def update(self):
		# Funcion para actualizar el estado del disparo
		self.rect.y += self.speedy
		if self.rect.bottom < 0:
			self.kill()


class Explosion(pygame.sprite.Sprite):
	# Clase para representar la explosion de los meteoritos

	def _init_(self, center):
		# Constructor para la explosion
		super()._init_()
		self.image = explosion_anim[0]
		self.rect = self.image.get_rect()
		self.rect.center = center 
		self.frame = 0
		self.last_update = pygame.time.get_ticks()
		self.frame_rate = 50


	def update(self):
		# Funcion para actualizar el estado de la explosion
		now = pygame.time.get_ticks()
		if now - self.last_update > self.frame_rate:
			self.last_update = now
			self.frame += 1
			if self.frame == len(explosion_anim):
				self.kill()
			else:
				center = self.rect.center
				self.image = explosion_anim[self.frame]
				self.rect = self.image.get_rect()
				self.rect.center = center


def show_go_screen():
	# Funcion para mostrar la pantalla inicial del juego
	screen.blit(background, [0, 0])
	draw_text(screen, "La Epa Ataca", 65, WIDTH // 2, HEIGHT // 10)
	draw_text(screen, "Use las flechas Izq - Der para moverse y Space para disparar.", 27, WIDTH // 2, HEIGHT / 1.8)
	draw_text(screen, "Presione cualquier tecla.", 20, WIDTH // 2, HEIGHT * 5/6)
	pygame.display.flip()
	waiting = True
	while waiting:
		clock.tick(60)
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				pygame.quit()
			if event.type == pygame.KEYUP:
				waiting = False


# Imagenes de meteoritos
meteor_images = []
meteor_list = ["PROYECTO/politico1.png", "PROYECTO/politico2.png", "PROYECTO/politico3.png", "PROYECTO/politico4.png"]
for img in meteor_list:
	meteor_images.append(pygame.transform.scale(pygame.image.load(img).convert(), (50, 50)))


# Imagenes de explosion
explosion_anim = []
explosion_list = ["PROYECTO/explosion0.png", "PROYECTO/explosion1.png", "PROYECTO/explosion2.png", "PROYECTO/explosion3.png", 
				  "PROYECTO/explosion4.png", "PROYECTO/explosion5.png", "PROYECTO/explosion6.png", "PROYECTO/explosion7.png"]

for img in explosion_list:
	a = pygame.image.load(img).convert()
	a.set_colorkey(BLACK)
	explosion_anim.append(pygame.transform.scale(a, (50, 50)))


# Imagen de fondo
background = pygame.image.load("PROYECTO/fondo.jpg").convert()



# Ejecucion del Juego La Epa Ataca
game_over = True
running = True
while running:
	if game_over:
		# Se inicializa el juego
		show_go_screen()

		game_over = False
		all_sprites = pygame.sprite.Group()
		meteor_list = pygame.sprite.Group()
		bullets = pygame.sprite.Group()

		player = Player()
		all_sprites.add(player)
		for i in range(8):
			meteor = Meteor()
			all_sprites.add(meteor)
			meteor_list.add(meteor)

		score = 0
		# Se pierde

	# Luego de que se pierde se puede volver a jugar
	clock.tick(60)
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			running = False

		elif event.type == pygame.KEYDOWN:
			if event.key == pygame.K_SPACE:
				player.shoot()

	all_sprites.update()

	# Colision: Meteoro - Laser (Sube el puntaje)
	hits = pygame.sprite.groupcollide(meteor_list, bullets, True, True)
	for hit in hits:
		score += 10
		explosion = Explosion(hit.rect.center)
		all_sprites.add(explosion)
		meteor = Meteor()
		all_sprites.add(meteor)
		meteor_list.add(meteor)

	# Colision: Jugador - Meteoro (Baja la vida)
	hits = pygame.sprite.spritecollide(player, meteor_list, True)
	for hit in hits:
		player.shield -= 25
		meteor = Meteor()
		all_sprites.add(meteor)
		meteor_list.add(meteor)
		if player.shield <= 0:
			game_over = True

	screen.blit(background, [0, 0])

	all_sprites.draw(screen)

	# Se muestra el puntaje
	draw_text(screen, str(score), 25, WIDTH // 2, 10)

	# Se muestra la barra de vida
	draw_shield_bar(screen, 5, 5, player.shield)

	pygame.display.flip()
pygame.quit()
